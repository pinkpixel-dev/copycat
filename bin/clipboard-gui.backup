#!/usr/bin/env python3
"""
üñ•Ô∏è Clipboard Helper GUI - Modern Interface

Beautiful GUI interface for the clipboard helper with all features
accessible through an intuitive interface.

Made with ‚ù§Ô∏è by Pink Pixel
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import subprocess
import threading
import json
from pathlib import Path
import time

# Add lib directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'lib'))

try:
    from clipboard_core import ClipboardManager
    from virtual_keyboard import VirtualKeyboard
    from data_handlers import DataHandler
except ImportError as e:
    print(f"‚ùå Error importing modules: {e}")
    sys.exit(1)

class ModernButton(tk.Button):
    """Modern styled button with hover effects"""
    def __init__(self, parent, **kwargs):
        # Default modern styling
        default_style = {
            'font': ('Segoe UI', 10, 'normal'),
            'relief': 'flat',
            'borderwidth': 0,
            'padx': 20,
            'pady': 8,
            'cursor': 'hand2'
        }
        default_style.update(kwargs)
        super().__init__(parent, **default_style)
        
        # Store colors for hover effects
        self.default_bg = default_style.get('bg', '#0078d4')
        self.hover_bg = self._lighten_color(self.default_bg, 0.1)
        
        # Bind hover events
        self.bind('<Enter>', self._on_enter)
        self.bind('<Leave>', self._on_leave)
    
    def _lighten_color(self, color, factor):
        """Lighten a hex color by a factor"""
        if color.startswith('#'):
            color = color[1:]
        r, g, b = tuple(int(color[i:i+2], 16) for i in (0, 2, 4))
        r = min(255, int(r + (255 - r) * factor))
        g = min(255, int(g + (255 - g) * factor))
        b = min(255, int(b + (255 - b) * factor))
        return f'#{r:02x}{g:02x}{b:02x}'
    
    def _on_enter(self, event):
        self.config(bg=self.hover_bg)
    
    def _on_leave(self, event):
        self.config(bg=self.default_bg)

class ClipboardHelperGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.clipboard = ClipboardManager()
        self.keyboard = VirtualKeyboard()
        self.data_handler = DataHandler()
        
        # GUI state
        self.typing_in_progress = False
        self.countdown_active = False
        
        self.setup_window()
        self.create_widgets()
        self.start_clipboard_monitor()
    
    def setup_window(self):
        """Configure main window"""
        self.root.title("üìã Clipboard Helper")
        self.root.geometry("800x600")
        self.root.minsize(600, 400)
        
        # Modern styling
        self.root.configure(bg='#f8f9fa')
        
        # Center window
        self.center_window()
        
        # Configure styles
        self.setup_styles()
        
        # Handle window closing
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def center_window(self):
        """Center the window on screen"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (self.root.winfo_width() // 2)
        y = (self.root.winfo_screenheight() // 2) - (self.root.winfo_height() // 2)
        self.root.geometry(f"+{x}+{y}")
    
    def setup_styles(self):
        """Setup ttk styles"""
        style = ttk.Style()
        
        # Configure notebook tabs
        style.configure('TNotebook.Tab', padding=[20, 10])
        style.configure('TNotebook', tabposition='n')
        
        # Configure other widgets
        style.configure('Title.TLabel', font=('Segoe UI', 16, 'bold'), foreground='#212529')
        style.configure('Subtitle.TLabel', font=('Segoe UI', 12), foreground='#6c757d')
        style.configure('Status.TLabel', font=('Consolas', 9), foreground='#495057')
    
    def create_widgets(self):
        """Create all GUI widgets"""
        # Main container
        main_frame = tk.Frame(self.root, bg='#f8f9fa')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Header
        self.create_header(main_frame)
        
        # Quick actions section
        self.create_quick_actions(main_frame)
        
        # Main content with tabs
        self.create_main_content(main_frame)
        
        # Status bar
        self.create_status_bar(main_frame)
    
    def create_header(self, parent):
        """Create header section"""
        header_frame = tk.Frame(parent, bg='#f8f9fa')
        header_frame.pack(fill='x', pady=(0, 20))
        
        # Title
        title_label = ttk.Label(header_frame, text="üìã Clipboard Helper", style='Title.TLabel')
        title_label.pack(anchor='w')
        
        # Subtitle
        subtitle_label = ttk.Label(
            header_frame, 
            text="Dream it, Pixel it ‚ú® - Your solution to Warp paste issues!", 
            style='Subtitle.TLabel'
        )
        subtitle_label.pack(anchor='w')
    
    def create_quick_actions(self, parent):
        """Create quick action buttons"""
        actions_frame = tk.Frame(parent, bg='#f8f9fa')
        actions_frame.pack(fill='x', pady=(0, 20))
        
        ttk.Label(actions_frame, text="Quick Actions", font=('Segoe UI', 12, 'bold')).pack(anchor='w', pady=(0, 10))
        
        # Button container
        btn_frame = tk.Frame(actions_frame, bg='#f8f9fa')
        btn_frame.pack(fill='x')
        
        # Main action buttons
        self.type_delayed_btn = ModernButton(
            btn_frame,
            text="üéπ Type Clipboard (Delayed)",
            bg='#28a745',
            fg='white',
            font=('Segoe UI', 11, 'bold'),
            command=self.type_delayed
        )
        self.type_delayed_btn.pack(side='left', padx=(0, 10))
        
        self.type_now_btn = ModernButton(
            btn_frame,
            text="‚ö° Type Now",
            bg='#17a2b8',
            fg='white',
            command=self.type_now
        )
        self.type_now_btn.pack(side='left', padx=(0, 10))
        
        self.clear_btn = ModernButton(
            btn_frame,
            text="üóëÔ∏è Clear",
            bg='#dc3545',
            fg='white',
            command=self.clear_clipboard
        )
        self.clear_btn.pack(side='left', padx=(0, 10))
        
        # Countdown label (hidden by default)
        self.countdown_label = ttk.Label(
            btn_frame, 
            text="", 
            font=('Segoe UI', 12, 'bold'),
            foreground='#28a745'
        )
        self.countdown_label.pack(side='right')
    
    def create_main_content(self, parent):
        """Create main tabbed content area"""
        # Notebook for tabs
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill='both', expand=True, pady=(0, 20))
        
        # Create tabs
        self.create_clipboard_tab()
        self.create_history_tab()
        self.create_templates_tab()
        self.create_settings_tab()
    
    def create_clipboard_tab(self):
        """Create clipboard monitoring tab"""
        frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(frame, text="üìã Clipboard")
        
        # Clipboard content area
        content_frame = tk.Frame(frame, bg='white')
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        ttk.Label(content_frame, text="Current Clipboard Content", font=('Segoe UI', 12, 'bold')).pack(anchor='w', pady=(0, 10))
        
        # Clipboard text area
        self.clipboard_text = scrolledtext.ScrolledText(
            content_frame,
            height=8,
            wrap='word',
            font=('Consolas', 10),
            state='disabled'
        )
        self.clipboard_text.pack(fill='both', expand=True, pady=(0, 10))
        
        # Clipboard actions
        actions_frame = tk.Frame(content_frame, bg='white')
        actions_frame.pack(fill='x', pady=(10, 0))
        
        ModernButton(
            actions_frame,
            text="üîÑ Refresh",
            bg='#6c757d',
            fg='white',
            command=self.refresh_clipboard
        ).pack(side='left', padx=(0, 10))
        
        ModernButton(
            actions_frame,
            text="üìÑ Copy to File",
            bg='#fd7e14',
            fg='white',
            command=self.save_clipboard_to_file
        ).pack(side='left', padx=(0, 10))
        
        # Data analysis area
        analysis_frame = tk.Frame(content_frame, bg='white')
        analysis_frame.pack(fill='x', pady=(20, 0))
        
        ttk.Label(analysis_frame, text="Content Analysis", font=('Segoe UI', 11, 'bold')).pack(anchor='w', pady=(0, 5))
        
        self.analysis_text = tk.Text(
            analysis_frame,
            height=4,
            wrap='word',
            font=('Segoe UI', 9),
            state='disabled',
            bg='#f8f9fa'
        )
        self.analysis_text.pack(fill='x', pady=(0, 10))
    
    def create_history_tab(self):
        """Create clipboard history tab"""
        frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(frame, text="üóÇÔ∏è History")
        
        content_frame = tk.Frame(frame, bg='white')
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Header
        header_frame = tk.Frame(content_frame, bg='white')
        header_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(header_frame, text="Clipboard History", font=('Segoe UI', 12, 'bold')).pack(side='left')
        
        ModernButton(
            header_frame,
            text="üîÑ Refresh",
            bg='#6c757d',
            fg='white',
            command=self.refresh_history
        ).pack(side='right')
        
        # History list
        self.history_frame = tk.Frame(content_frame, bg='white')
        self.history_frame.pack(fill='both', expand=True)
        
        # History listbox with scrollbar
        list_frame = tk.Frame(self.history_frame, bg='white')
        list_frame.pack(fill='both', expand=True)
        
        self.history_listbox = tk.Listbox(
            list_frame,
            font=('Consolas', 9),
            selectmode='single'
        )
        history_scrollbar = tk.Scrollbar(list_frame, orient='vertical', command=self.history_listbox.yview)
        self.history_listbox.configure(yscrollcommand=history_scrollbar.set)
        
        self.history_listbox.pack(side='left', fill='both', expand=True)
        history_scrollbar.pack(side='right', fill='y')
        
        # History actions
        history_actions = tk.Frame(content_frame, bg='white')
        history_actions.pack(fill='x', pady=(10, 0))
        
        ModernButton(
            history_actions,
            text="üìã Restore Selected",
            bg='#28a745',
            fg='white',
            command=self.restore_from_history
        ).pack(side='left', padx=(0, 10))
        
        ModernButton(
            history_actions,
            text="üóëÔ∏è Clear History",
            bg='#dc3545',
            fg='white',
            command=self.clear_history
        ).pack(side='left')
    
    def create_templates_tab(self):
        """Create templates tab"""
        frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(frame, text="üìù Templates")
        
        content_frame = tk.Frame(frame, bg='white')
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        ttk.Label(content_frame, text="Quick Templates", font=('Segoe UI', 12, 'bold')).pack(anchor='w', pady=(0, 10))
        
        # Templates area
        templates_scroll = scrolledtext.ScrolledText(
            content_frame,
            height=15,
            wrap='word',
            font=('Segoe UI', 10),
            state='disabled'
        )
        templates_scroll.pack(fill='both', expand=True, pady=(0, 10))
        
        self.templates_text = templates_scroll
        
        # Template actions
        template_actions = tk.Frame(content_frame, bg='white')
        template_actions.pack(fill='x')
        
        ModernButton(
            template_actions,
            text="üîÑ Refresh Templates",
            bg='#6c757d',
            fg='white',
            command=self.load_templates
        ).pack(side='left')
    
    def create_settings_tab(self):
        """Create settings tab"""
        frame = tk.Frame(self.notebook, bg='white')
        self.notebook.add(frame, text="‚öôÔ∏è Settings")
        
        content_frame = tk.Frame(frame, bg='white')
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        ttk.Label(content_frame, text="System Status", font=('Segoe UI', 12, 'bold')).pack(anchor='w', pady=(0, 10))
        
        # Status display
        self.status_text = scrolledtext.ScrolledText(
            content_frame,
            height=8,
            wrap='word',
            font=('Consolas', 9),
            state='disabled'
        )
        self.status_text.pack(fill='both', expand=True, pady=(0, 10))
        
        # Settings actions
        settings_actions = tk.Frame(content_frame, bg='white')
        settings_actions.pack(fill='x')
        
        ModernButton(
            settings_actions,
            text="üîÑ Check Status",
            bg='#17a2b8',
            fg='white',
            command=self.update_status
        ).pack(side='left', padx=(0, 10))
        
        ModernButton(
            settings_actions,
            text="‚öôÔ∏è Setup Config",
            bg='#ffc107',
            fg='black',
            command=self.setup_config
        ).pack(side='left', padx=(0, 10))
    
    def create_status_bar(self, parent):
        """Create status bar"""
        self.status_bar = tk.Frame(parent, bg='#e9ecef', height=30)
        self.status_bar.pack(fill='x', side='bottom')
        self.status_bar.pack_propagate(False)
        
        self.status_label = ttk.Label(
            self.status_bar, 
            text="Ready", 
            style='Status.TLabel',
            background='#e9ecef'
        )
        self.status_label.pack(side='left', padx=10, pady=5)
        
        # Virtual keyboard status
        self.keyboard_status = ttk.Label(
            self.status_bar,
            text="üéπ Virtual Keyboard: Checking...",
            style='Status.TLabel',
            background='#e9ecef'
        )
        self.keyboard_status.pack(side='right', padx=10, pady=5)
        
        # Update keyboard status
        self.update_keyboard_status()
    
    def update_keyboard_status(self):
        """Update virtual keyboard status"""
        if self.keyboard.is_available():
            self.keyboard_status.config(text="üéπ Virtual Keyboard: Ready ‚úÖ", foreground='#28a745')
        else:
            self.keyboard_status.config(text="üéπ Virtual Keyboard: Not Available ‚ùå", foreground='#dc3545')
    
    def start_clipboard_monitor(self):
        """Start monitoring clipboard changes"""
        self.refresh_clipboard()
        # Schedule next check
        self.root.after(2000, self.start_clipboard_monitor)
    
    def refresh_clipboard(self):
        """Refresh clipboard content display"""
        try:
            content = self.clipboard.get()
            
            # Update clipboard display
            self.clipboard_text.config(state='normal')
            self.clipboard_text.delete(1.0, 'end')
            
            if content:
                self.clipboard_text.insert(1.0, content)
                
                # Analyze content
                analysis = self.data_handler.analyze_content(content)
                self.update_analysis_display(analysis)
                
                # Update status
                self.status_label.config(text=f"Clipboard: {len(content)} characters")
            else:
                self.clipboard_text.insert(1.0, "(empty)")
                self.analysis_text.config(state='normal')
                self.analysis_text.delete(1.0, 'end')
                self.analysis_text.config(state='disabled')
                self.status_label.config(text="Clipboard: empty")
            
            self.clipboard_text.config(state='disabled')
            
        except Exception as e:
            self.status_label.config(text=f"Error: {str(e)}")
    
    def update_analysis_display(self, analysis):
        """Update content analysis display"""
        self.analysis_text.config(state='normal')
        self.analysis_text.delete(1.0, 'end')
        
        info_lines = [
            f"Type: {analysis['primary_type'].title()}",
            f"Length: {analysis['original_length']} chars, {analysis['words']} words, {analysis['lines']} lines",
            f"Confidence: {analysis['confidence']:.1%}"
        ]
        
        if analysis.get('metadata'):
            for key, value in analysis['metadata'].items():
                if key not in ['masked', 'service']:  # Don't show sensitive info
                    info_lines.append(f"{key.title()}: {value}")
        
        self.analysis_text.insert(1.0, '\n'.join(info_lines))
        self.analysis_text.config(state='disabled')
    
    def type_delayed(self):
        """Type clipboard content after delay"""
        if self.typing_in_progress:
            messagebox.showwarning("In Progress", "Typing operation already in progress!")
            return
        
        content = self.clipboard.get()
        if not content:
            messagebox.showwarning("Empty Clipboard", "Nothing to type - clipboard is empty!")
            return
        
        if not self.keyboard.is_available():
            messagebox.showerror("Virtual Keyboard Error", "Virtual keyboard not available!\nMake sure xdotool is installed.")
            return
        
        # Start countdown
        self.start_countdown()
    
    def start_countdown(self):
        """Start 3-second countdown"""
        self.typing_in_progress = True
        self.countdown_active = True
        
        # Disable buttons
        self.type_delayed_btn.config(state='disabled')
        self.type_now_btn.config(state='disabled')
        
        # Start countdown in separate thread
        threading.Thread(target=self.countdown_worker, daemon=True).start()
    
    def countdown_worker(self):
        """Countdown worker thread"""
        try:
            for i in range(3, 0, -1):
                if not self.countdown_active:  # Check if cancelled
                    return
                
                # Update countdown display
                self.root.after(0, lambda i=i: self.countdown_label.config(text=f"‚è≥ Typing in {i}..."))
                time.sleep(1)
            
            # Start typing
            self.root.after(0, lambda: self.countdown_label.config(text="üéπ Typing now!"))
            
            content = self.clipboard.get()
            success = self.keyboard.type_text(content, delay=50)
            
            # Update UI
            if success:
                self.root.after(0, lambda: self.status_label.config(text=f"‚úÖ Typed {len(content)} characters"))
            else:
                self.root.after(0, lambda: self.status_label.config(text="‚ùå Typing failed"))
            
        except Exception as e:
            self.root.after(0, lambda: self.status_label.config(text=f"‚ùå Error: {str(e)}"))
        
        finally:
            # Re-enable UI
            self.root.after(0, self.finish_typing)
    
    def finish_typing(self):
        """Clean up after typing operation"""
        self.typing_in_progress = False
        self.countdown_active = False
        
        # Re-enable buttons
        self.type_delayed_btn.config(state='normal')
        self.type_now_btn.config(state='normal')
        
        # Clear countdown
        self.countdown_label.config(text="")
    
    def type_now(self):
        """Type clipboard content immediately"""
        if self.typing_in_progress:
            messagebox.showwarning("In Progress", "Typing operation already in progress!")
            return
        
        content = self.clipboard.get()
        if not content:
            messagebox.showwarning("Empty Clipboard", "Nothing to type - clipboard is empty!")
            return
        
        if not self.keyboard.is_available():
            messagebox.showerror("Virtual Keyboard Error", "Virtual keyboard not available!")
            return
        
        # Type in background thread
        self.typing_in_progress = True
        self.type_now_btn.config(state='disabled')
        
        def type_worker():
            try:
                success = self.keyboard.type_text(content, delay=30)
                if success:
                    self.root.after(0, lambda: self.status_label.config(text=f"‚úÖ Typed {len(content)} characters"))
                else:
                    self.root.after(0, lambda: self.status_label.config(text="‚ùå Typing failed"))
            except Exception as e:
                self.root.after(0, lambda: self.status_label.config(text=f"‚ùå Error: {str(e)}"))
            finally:
                self.root.after(0, lambda: (
                    setattr(self, 'typing_in_progress', False),
                    self.type_now_btn.config(state='normal')
                ))
        
        threading.Thread(target=type_worker, daemon=True).start()
    
    def clear_clipboard(self):
        """Clear clipboard"""
        if self.clipboard.clear():
            self.status_label.config(text="‚úÖ Clipboard cleared")
            self.refresh_clipboard()
        else:
            self.status_label.config(text="‚ùå Failed to clear clipboard")
    
    def save_clipboard_to_file(self):
        """Save clipboard content to file"""
        content = self.clipboard.get()
        if not content:
            messagebox.showwarning("Empty Clipboard", "Nothing to save - clipboard is empty!")
            return
        
        filename = filedialog.asksaveasfilename(
            title="Save Clipboard Content",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                self.status_label.config(text=f"‚úÖ Saved to {filename}")
            except Exception as e:
                messagebox.showerror("Save Error", f"Failed to save file:\n{str(e)}")
    
    def refresh_history(self):
        """Refresh clipboard history"""
        try:
            history = self.clipboard.get_history()
            
            self.history_listbox.delete(0, 'end')
            
            if not history:
                self.history_listbox.insert(0, "(No history available)")
                return
            
            for i, entry in enumerate(reversed(history[-20:])):  # Show last 20 entries
                timestamp = entry.get('timestamp', 'Unknown')[:19]  # Remove microseconds
                preview = entry.get('preview', entry.get('content', ''))[:60]
                self.history_listbox.insert(0, f"{timestamp} - {preview}")
            
            self.status_label.config(text=f"History: {len(history)} entries")
            
        except Exception as e:
            self.status_label.config(text=f"History error: {str(e)}")
    
    def restore_from_history(self):
        """Restore selected history item to clipboard"""
        selection = self.history_listbox.curselection()
        if not selection:
            messagebox.showwarning("No Selection", "Please select a history item first!")
            return
        
        try:
            index = selection[0]
            history = self.clipboard.get_history()
            
            if history:
                # Get the actual entry (accounting for reversed display)
                actual_index = len(history) - 1 - index
                if 0 <= actual_index < len(history):
                    content = history[actual_index]['content']
                    if self.clipboard.set(content):
                        self.status_label.config(text="‚úÖ Restored from history")
                        self.refresh_clipboard()
                    else:
                        self.status_label.config(text="‚ùå Failed to restore")
        except Exception as e:
            messagebox.showerror("Restore Error", f"Failed to restore:\n{str(e)}")
    
    def clear_history(self):
        """Clear clipboard history"""
        if messagebox.askyesno("Clear History", "Are you sure you want to clear all clipboard history?"):
            try:
                self.clipboard.clear_history()
                self.refresh_history()
                self.status_label.config(text="‚úÖ History cleared")
            except Exception as e:
                messagebox.showerror("Clear Error", f"Failed to clear history:\n{str(e)}")
    
    def load_templates(self):
        """Load and display templates"""
        try:
            templates_file = Path(__file__).parent.parent / "config" / "templates.json"
            
            self.templates_text.config(state='normal')
            self.templates_text.delete(1.0, 'end')
            
            if not templates_file.exists():
                self.templates_text.insert(1.0, "No templates file found.")
                self.templates_text.config(state='disabled')
                return
            
            with open(templates_file, 'r') as f:
                data = json.load(f)
            
            content = "üìù Available Templates\n" + "="*50 + "\n\n"
            
            for template in data.get('templates', []):
                content += f"üè∑Ô∏è {template['name']} ({template['category']})\n"
                content += f"   {template['description']}\n"
                
                if template.get('placeholders'):
                    content += "   Placeholders:\n"
                    for placeholder in template['placeholders'][:3]:  # Show first 3
                        content += f"     ‚Ä¢ {placeholder['name']}: {placeholder.get('description', '')}\n"
                
                content += "\n"
            
            self.templates_text.insert(1.0, content)
            self.templates_text.config(state='disabled')
            
        except Exception as e:
            self.templates_text.config(state='normal')
            self.templates_text.delete(1.0, 'end')
            self.templates_text.insert(1.0, f"Error loading templates: {str(e)}")
            self.templates_text.config(state='disabled')
    
    def update_status(self):
        """Update system status display"""
        try:
            self.status_text.config(state='normal')
            self.status_text.delete(1.0, 'end')
            
            status_info = []
            
            # Basic info
            status_info.append("üìã Clipboard Helper Status")
            status_info.append("=" * 40)
            status_info.append(f"Version: 1.0.0")
            status_info.append("")
            
            # Dependencies
            status_info.append("Dependencies:")
            
            # Check xclip
            try:
                result = subprocess.run(['xclip', '-version'], capture_output=True, timeout=5)
                if result.returncode == 0:
                    status_info.append("  ‚úÖ xclip - Clipboard access")
                else:
                    status_info.append("  ‚ùå xclip - Clipboard access (ERROR)")
            except:
                status_info.append("  ‚ùå xclip - Clipboard access (NOT FOUND)")
            
            # Check xdotool
            try:
                result = subprocess.run(['xdotool', '--version'], capture_output=True, timeout=5)
                if result.returncode == 0:
                    status_info.append("  ‚úÖ xdotool - Virtual keyboard")
                else:
                    status_info.append("  ‚ùå xdotool - Virtual keyboard (ERROR)")
            except:
                status_info.append("  ‚ùå xdotool - Virtual keyboard (NOT FOUND)")
            
            # Check notify-send
            try:
                result = subprocess.run(['notify-send', '--version'], capture_output=True, timeout=5)
                status_info.append("  ‚úÖ notify-send - Notifications")
            except:
                status_info.append("  ‚ùå notify-send - Notifications (NOT FOUND)")
            
            status_info.append("")
            
            # Virtual keyboard status
            kb_status = self.keyboard.get_status()
            status_info.append("Virtual Keyboard:")
            status_info.append(f"  Available: {'Yes' if kb_status['available'] else 'No'}")
            status_info.append(f"  Display Server: {kb_status['display_server']}")
            status_info.append(f"  Methods: {', '.join([k for k, v in kb_status['methods'].items() if v])}")
            
            status_info.append("")
            
            # Clipboard info
            clipboard_info = self.clipboard.get_clipboard_info()
            status_info.append("Current Clipboard:")
            status_info.append(f"  Has Content: {'Yes' if clipboard_info['has_content'] else 'No'}")
            if clipboard_info['has_content']:
                status_info.append(f"  Length: {clipboard_info['length']} characters")
                status_info.append(f"  Lines: {clipboard_info['lines']}")
                status_info.append(f"  Words: {clipboard_info['words']}")
            
            self.status_text.insert(1.0, '\n'.join(status_info))
            self.status_text.config(state='disabled')
            
        except Exception as e:
            self.status_text.config(state='normal')
            self.status_text.delete(1.0, 'end')
            self.status_text.insert(1.0, f"Error getting status: {str(e)}")
            self.status_text.config(state='disabled')
    
    def setup_config(self):
        """Setup user configuration"""
        try:
            # Run the CLI setup command
            subprocess.run([
                str(Path(__file__).parent / "clipboard-helper"),
                "--setup"
            ], check=True)
            
            messagebox.showinfo("Setup Complete", "User configuration has been created!")
            self.status_label.config(text="‚úÖ Configuration setup complete")
            
        except subprocess.CalledProcessError as e:
            messagebox.showerror("Setup Error", f"Failed to setup configuration:\n{str(e)}")
        except Exception as e:
            messagebox.showerror("Setup Error", f"Unexpected error:\n{str(e)}")
    
    def on_closing(self):
        """Handle window closing"""
        if self.typing_in_progress:
            if messagebox.askokcancel("Quit", "Typing operation in progress. Really quit?"):
                self.countdown_active = False
                self.root.quit()
        else:
            self.root.quit()
    
    def run(self):
        """Start the GUI"""
        # Load initial data
        self.refresh_history()
        self.load_templates()
        self.update_status()
        
        # Start main loop
        self.root.mainloop()

def main():
    """Main entry point"""
    try:
        app = ClipboardHelperGUI()
        app.run()
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"‚ùå Error starting GUI: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()