#!/usr/bin/env python3
"""
📋 Clipboard Helper - Linux Copy-Paste Solution

A comprehensive clipboard utility designed to solve copy-paste issues in Linux applications,
especially web-based UIs like Warp terminal settings.

Made with ❤️ by Pink Pixel
"""

import sys
import os
import argparse
import time
import subprocess
import json
import configparser
from pathlib import Path

# Add lib directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'lib'))

try:
    from clipboard_core import ClipboardManager
    from virtual_keyboard import VirtualKeyboard
    from data_handlers import DataHandler
except ImportError as e:
    print(f"❌ Error importing modules: {e}")
    print("🔧 Make sure all library files are properly installed.")
    sys.exit(1)

class ClipboardHelper:
    def __init__(self):
        self.version = "1.0.0"
        self.config_dir = Path.home() / ".config" / "clipboard-helper"
        self.config_file = self.config_dir / "config.conf"
        self.default_config_file = Path(__file__).parent.parent / "config" / "default.conf"
        
        self.clipboard = ClipboardManager()
        self.keyboard = VirtualKeyboard()
        self.data_handler = DataHandler()
        
        self.config = self._load_config()
    
    def _load_config(self):
        """Load configuration from files"""
        config = configparser.ConfigParser()
        
        # Load default config first
        if self.default_config_file.exists():
            config.read(self.default_config_file)
        
        # Override with user config if exists
        if self.config_file.exists():
            config.read(self.config_file)
        
        return config
    
    def _setup_user_config(self):
        """Create user config directory and file if needed"""
        self.config_dir.mkdir(parents=True, exist_ok=True)
        
        if not self.config_file.exists():
            # Copy default config to user directory
            if self.default_config_file.exists():
                import shutil
                shutil.copy2(self.default_config_file, self.config_file)
                print(f"✅ Created user configuration at {self.config_file}")
    
    def get_clipboard(self):
        """Get current clipboard content"""
        try:
            content = self.clipboard.get()
            if content:
                print(content, end='')  # No newline for piping
                return True
            else:
                print("📋 Clipboard is empty", file=sys.stderr)
                return False
        except Exception as e:
            print(f"❌ Error reading clipboard: {e}", file=sys.stderr)
            return False
    
    def set_clipboard(self, text):
        """Set clipboard content"""
        try:
            success = self.clipboard.set(text)
            if success:
                print(f"✅ Clipboard updated with {len(text)} characters")
                return True
            else:
                print("❌ Failed to set clipboard", file=sys.stderr)
                return False
        except Exception as e:
            print(f"❌ Error setting clipboard: {e}", file=sys.stderr)
            return False
    
    def type_clipboard(self, delay=None):
        """Type clipboard content using virtual keyboard"""
        try:
            content = self.clipboard.get()
            if not content:
                print("📋 Clipboard is empty - nothing to type", file=sys.stderr)
                return False
            
            if delay:
                print(f"⏱️  Starting to type in {delay} seconds...")
                for i in range(int(delay), 0, -1):
                    print(f"⏳ {i}...", end=' ')
                    sys.stdout.flush()
                    time.sleep(1)
                print("\n🎹 Typing now!")
            
            # Get typing delay from config
            typing_delay = self.config.getint('general', 'typing_delay', fallback=50)
            
            success = self.keyboard.type_text(content, delay=typing_delay)
            if success:
                print(f"✅ Successfully typed {len(content)} characters")
                return True
            else:
                print("❌ Failed to type text", file=sys.stderr)
                return False
                
        except Exception as e:
            print(f"❌ Error typing clipboard content: {e}", file=sys.stderr)
            return False
    
    def show_history(self):
        """Show clipboard history"""
        try:
            history = self.clipboard.get_history()
            if not history:
                print("📋 No clipboard history available")
                return
            
            print("📋 Clipboard History:")
            print("=" * 50)
            for i, entry in enumerate(history[-10:], 1):  # Show last 10 entries
                preview = entry['content'][:50]
                if len(entry['content']) > 50:
                    preview += "..."
                print(f"{i:2d}. {entry['timestamp']} - {preview}")
            
        except Exception as e:
            print(f"❌ Error retrieving history: {e}", file=sys.stderr)
    
    def show_templates(self):
        """Show available templates"""
        try:
            templates_file = Path(__file__).parent.parent / "config" / "templates.json"
            if not templates_file.exists():
                print("📝 No templates available")
                return
            
            with open(templates_file, 'r') as f:
                data = json.load(f)
            
            print("📝 Available Templates:")
            print("=" * 50)
            for template in data.get('templates', []):
                print(f"🏷️  {template['name']} ({template['category']})")
                print(f"   {template['description']}")
                print()
        
        except Exception as e:
            print(f"❌ Error loading templates: {e}", file=sys.stderr)
    
    def clear_clipboard(self):
        """Clear clipboard content"""
        try:
            success = self.clipboard.clear()
            if success:
                print("✅ Clipboard cleared")
                return True
            else:
                print("❌ Failed to clear clipboard", file=sys.stderr)
                return False
        except Exception as e:
            print(f"❌ Error clearing clipboard: {e}", file=sys.stderr)
            return False
    
    def show_status(self):
        """Show system status and configuration"""
        print("📋 Clipboard Helper Status")
        print("=" * 30)
        print(f"Version: {self.version}")
        print(f"Config Dir: {self.config_dir}")
        print(f"Dependencies:")
        
        # Check dependencies
        deps = [
            ('xclip', 'Clipboard access'),
            ('xdotool', 'Virtual keyboard'),
            ('notify-send', 'Notifications')
        ]
        
        for cmd, desc in deps:
            try:
                subprocess.run([cmd, '--version'], 
                             stdout=subprocess.DEVNULL, 
                             stderr=subprocess.DEVNULL, 
                             check=True)
                print(f"  ✅ {cmd} - {desc}")
            except (subprocess.CalledProcessError, FileNotFoundError):
                print(f"  ❌ {cmd} - {desc} (NOT FOUND)")
        
        # Show clipboard status
        content = self.clipboard.get()
        if content:
            preview = content[:50]
            if len(content) > 50:
                preview += "..."
            print(f"\nCurrent Clipboard: {preview}")
        else:
            print("\nCurrent Clipboard: (empty)")
    
    def launch_gui(self):
        """Launch the GUI interface"""
        try:
            gui_script = Path(__file__).parent / "clipboard-gui"
            if gui_script.exists():
                subprocess.Popen([str(gui_script)])
                print("🖥️  GUI launched")
            else:
                print("❌ GUI not found. Install GUI components first.", file=sys.stderr)
                return False
        except Exception as e:
            print(f"❌ Error launching GUI: {e}", file=sys.stderr)
            return False

def main():
    """Main CLI interface"""
    
    # ASCII Art Banner
    banner = """
    ╔═══════════════════════════════════════╗
    ║         📋 CLIPBOARD HELPER           ║
    ║                                       ║
    ║       Dream it, Pixel it ✨          ║
    ╚═══════════════════════════════════════╝
    """
    
    parser = argparse.ArgumentParser(
        description="Linux clipboard utility for solving copy-paste issues in web-based UIs",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
Examples:
  clipboard-helper --get                    # Get clipboard content
  clipboard-helper --set "Hello World"     # Set clipboard content  
  clipboard-helper --type                   # Type clipboard content
  clipboard-helper --type-delayed           # Type after 3-second delay
  clipboard-helper --history               # Show clipboard history
  clipboard-helper --templates             # Show available templates
  clipboard-helper --gui                   # Launch GUI interface
  
For Warp Settings Issue:
  1. Copy your API key/config
  2. Run: clipboard-helper --type-delayed
  3. Quickly switch to Warp settings
  4. Focus the input field
  5. Watch it type automatically! 🎉

Made with ❤️ by Pink Pixel
        """
    )
    
    parser.add_argument('--version', action='version', version=f'Clipboard Helper {ClipboardHelper().version}')
    parser.add_argument('--get', action='store_true', help='Get clipboard content')
    parser.add_argument('--set', metavar='TEXT', help='Set clipboard content')
    parser.add_argument('--type', action='store_true', help='Type clipboard content immediately')
    parser.add_argument('--type-delayed', action='store_true', help='Type clipboard content after delay')
    parser.add_argument('--clear', action='store_true', help='Clear clipboard')
    parser.add_argument('--history', action='store_true', help='Show clipboard history')
    parser.add_argument('--templates', action='store_true', help='Show available templates')
    parser.add_argument('--gui', action='store_true', help='Launch GUI interface')
    parser.add_argument('--status', action='store_true', help='Show system status')
    parser.add_argument('--setup', action='store_true', help='Setup user configuration')
    parser.add_argument('--quiet', '-q', action='store_true', help='Suppress banner and verbose output')
    
    args = parser.parse_args()
    
    # Show banner unless quiet mode
    if not args.quiet and not any([args.get, args.set]):
        print(banner)
    
    helper = ClipboardHelper()
    
    # Handle setup first
    if args.setup:
        helper._setup_user_config()
        return 0
    
    # Execute commands
    success = True
    
    if args.get:
        success = helper.get_clipboard()
    elif args.set:
        success = helper.set_clipboard(args.set)
    elif args.type:
        success = helper.type_clipboard()
    elif args.type_delayed:
        delay = helper.config.getfloat('typing', 'initial_delay', fallback=3.0)
        success = helper.type_clipboard(delay)
    elif args.clear:
        success = helper.clear_clipboard()
    elif args.history:
        helper.show_history()
    elif args.templates:
        helper.show_templates()
    elif args.gui:
        success = helper.launch_gui()
    elif args.status:
        helper.show_status()
    else:
        # No specific command - show help
        parser.print_help()
        return 0
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())